version: 2.1
description: "Allows CircleCI builds to access private network services over a intermediate jump host using SSH port forwarding."
commands:
  start_stats:
    parameters:
      stats_path:
        description: the relative or absolute directory for stats reports.
        default: circleci-stats
        type: string
    steps:
      - run:
          name: Install/Confirm utilitis (gawk, )
          command: |
            # debian and ubuntu *(perhaps others) basic awk does not have functions we need insralling gawk replaces awk
            sudo apt-get -y update && sudo apt-get -y install gawk || true  
      - run:
          name: Start background stats
          command: |
            mkdir -p <<parameters.stats_path>>
            while true;do sudo ps -Aorss,%cpu | sed '1d'  | awk '{mem += $1;cpu += $2}END{tmem = mem / 1024;tcpu = cpu / 1024; ts = strftime("%m/%d/%Y %H:%M:%S"); printf "%s %.2f MB, %.2f %\n", ts, tmem, tcpu}' >> <<parameters.stats_path>>/stats.txt;sleep 10; done
          background: true

  expose_stats:
    parameters:
      stats_path:
        description: the relative or absolute directory for stats reports.
        default: circleci-stats
        type: string
    steps:
      - run:
          name: Stats Summary
          command: |
            awk 'function bigger(val,max){if(val > max){return val}else{return max}}{hmem=bigger($3,hmem);hcpu=bigger($5,hcpu)}END{printf "Highest values:\nMemory:\t%.2f MB\nCPU:\t%.2f %\n",hmem,hcpu}' <<parameters.stats_path>>/stats.txt
            echo "See the <<parameters.stats_path>>/stats.txt (available as an artifact to this job) for full history with timestamps"
            
   
      - store_artifacts:
          path: <<parameters.stats_path>>

  credits_used:
    parameters:
      token:
        description: Env var containing API token for private projects.
        default: '${CIRCLECI_API_TOKEN}'
        type: string
    steps:   
      - run:
          name: Credit Consumption (Estimate)
          command: |
            curl -s "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}?limit=1&token=<<parameters.token>>" > /tmp/build-info.json 
            CREDITS=$( jq '.[0].picard.resource_class.class as $size |.[0].start_time as $start |((now - ($start | split(".")[0] +"Z" | fromdate)) / 60) as $build_time |[{"size":"small","credits":5},{"size":"medium","credits":10},{"size":"medium+","credits":15},{"size":"large","credits":20},{"size":"xlarge","credits":40}] |  .[] | select(.size == $size ) |  .credits * $build_time | floor' /tmp/build-info.json )
            echo "This build has used ${CREDITS} credits."
            echo "NOTE: This is an **estimate** based on executor size and build time."

jobs:
  with_stats:
    parameters:
      stats_path:
        description: the relative or absolute directory for stats reports.
        default: circleci-stats
        type: string
      executor:
        description: the executor to use for job
        default: default
        type: executor
      token:
        description: Env var containing API token for private projects.
        default: '${CIRCLECI_API_TOKEN}'
        type: string
      job_steps:
        description: Map of steps to run while collecting stats
        type: steps
    executor: <<parameters.executor>>
    steps:
      - checkout
      - start_stats:
          stats_path: <<parameters.stats_path>>
      - steps: <<parameters.job_steps>>
      - expose_stats:
          stats_path: <<parameters.stats_path>>
      - credits_used:
          token: <<parameters.token>>


executors:
  default:
    parameters:
      docker_image:
        description: the docker image to use for job
        default: circleci/node:10
        type: string
    docker:
      - image: <<parameters.docker_image>>

examples:
  providing_key_as_path:
    description: Install stress and use memory
    usage:
      version: 2.1
      orbs:
        stats: eddiewebb/stats@volatile
      workflows:
        stress_stats:
          jobs:
            - stats/with_stats:
                job_steps:
                  - run: sudo apt-get update  && sudo apt-get -y install stress || true
                  - run: stress --vm 4 --timeout 30
